"""Handlers for admin commands."""

from __future__ import annotations

from datetime import datetime, timedelta
from decimal import Decimal, InvalidOperation
from uuid import UUID

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bots.tg.middlewares.access import AdminAccessMiddleware
from app.bots.tg.states import TenantManagement, TariffManagement, MeterManagement
from app.core.repositories.tenant import TenantRepository
from app.core.repositories.meter import MeterRepository
from app.core.models import Tariff, Meter
from app.bots.tg.keyboards.inline import AdminActionCallback

router = Router(name=__name__)

router.message.middleware(AdminAccessMiddleware())
router.callback_query.middleware(AdminAccessMiddleware())


# --- Tenant Creation FSM ---
@router.message(F.text == "üë§ –°–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞")
async def handle_new_tenant(message: Message, state: FSMContext):
    """Starts the process of creating a new tenant."""
    await state.set_state(TenantManagement.enter_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:")


@router.message(TenantManagement.enter_name)
async def handle_tenant_name(message: Message, state: FSMContext):
    """Handles the new tenant's name and saves it."""
    if not message.text:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    tenant_name = message.text
    tenant, created = await TenantRepository().get_or_create(name=tenant_name)

    if not created:
        await message.answer(f"–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä —Å –∏–º–µ–Ω–µ–º '{tenant_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        await message.answer(f"–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä '{tenant.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

    await state.clear()


# --- Meter Creation FSM ---
@router.message(F.text == "üìü –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫")
async def handle_new_meter(message: Message, state: FSMContext):
    """Starts the FSM for adding a new meter."""
    tenants = await TenantRepository().all()
    if not tenants:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞.")
        return

    builder = InlineKeyboardBuilder()
    for tenant in tenants:
        builder.row(
            InlineKeyboardButton(
                text=tenant.name,
                callback_data=AdminActionCallback(
                    action="stm", entity_id=str(tenant.id)
                ).pack(),
            )
        )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫:",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(MeterManagement.select_tenant)


@router.callback_query(AdminActionCallback.filter(F.action == "stm"))
async def handle_meter_tenant_select(
    query: CallbackQuery, callback_data: AdminActionCallback, state: FSMContext
):
    """Handles tenant selection for meter and asks for its name."""
    if not isinstance(query.message, Message):
        return
    await state.update_data(tenant_id=callback_data.entity_id)
    await state.set_state(MeterManagement.enter_name)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û—Ñ–∏—Å 1'):"
    )


@router.message(MeterManagement.enter_name)
async def handle_meter_name(message: Message, state: FSMContext):
    """Handles the new meter's name and saves it."""
    if not message.text:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    tenant_id = data["tenant_id"]
    meter_name = message.text

    # Check if a meter with this name already exists for the tenant
    existing_meter = await Meter.filter(tenant_id=tenant_id, name=meter_name).first()
    if existing_meter:
        await message.answer(
            f"–°—á–µ—Ç—á–∏–∫ —Å –∏–º–µ–Ω–µ–º '{meter_name}' —É —ç—Ç–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        await state.clear()
        return

    # Save the entered name and ask if it's a submeter
    await state.update_data(meter_name=meter_name)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="sub_no"),
        InlineKeyboardButton(text="–î–∞", callback_data="sub_yes"),
    )
    await message.answer(
        "–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ—Ç —Å—á—ë—Ç—á–∏–∫ –ø–æ–¥-—Å—á—ë—Ç—á–∏–∫–æ–º –¥—Ä—É–≥–æ–≥–æ?",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(MeterManagement.ask_is_submeter)


@router.callback_query(MeterManagement.ask_is_submeter, F.data == "sub_no")
async def handle_meter_no_sub(query: CallbackQuery, state: FSMContext):
    """Creates meter without parent."""
    if not isinstance(query.message, Message):
        return
    data = await state.get_data()
    meter = await Meter.create(tenant_id=data["tenant_id"], name=data["meter_name"])
    await query.message.edit_text(f"‚úÖ –°—á—ë—Ç—á–∏–∫ '{meter.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()


@router.callback_query(MeterManagement.ask_is_submeter, F.data == "sub_yes")
async def handle_meter_yes_sub(query: CallbackQuery, state: FSMContext):
    """Shows list of potential parent meters."""
    if not isinstance(query.message, Message):
        return
    data = await state.get_data()
    tenant_id = data["tenant_id"]
    meters = await MeterRepository().get_for_tenant(UUID(tenant_id))
    if not meters:
        await query.message.edit_text("–£ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤.")
        return
    builder = InlineKeyboardBuilder()
    for meter in meters:
        builder.row(
            InlineKeyboardButton(
                text=meter.name,
                callback_data=f"select_parent:{meter.id}",
            )
        )
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å—á—ë—Ç—á–∏–∫:", reply_markup=builder.as_markup()
    )
    await state.set_state(MeterManagement.select_parent_meter)


@router.callback_query(MeterManagement.select_parent_meter)
async def handle_parent_selected(query: CallbackQuery, state: FSMContext):
    """Creates new meter with chosen parent."""
    if not isinstance(query.message, Message):
        return
    if not query.data or not query.data.startswith("select_parent:"):
        return
    parent_id = query.data.split(":", 1)[1]
    data = await state.get_data()

    # Get the parent meter for display name
    parent_meter = await Meter.get(id=parent_id)
    meter = await Meter.create(
        tenant_id=data["tenant_id"],
        name=data["meter_name"],
        subtract_from_id=parent_id,
    )
    await query.message.edit_text(
        f"‚úÖ –°—á—ë—Ç—á–∏–∫ '{meter.name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–¥-—Å—á—ë—Ç—á–∏–∫ '{parent_meter.name}'."
    )
    await state.clear()


# --- Tariff Creation FSM ---
@router.message(F.text == "üìà –°–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ")
async def handle_new_tariff(message: Message, state: FSMContext):
    """Starts the FSM for creating a new tariff by selecting a tenant."""
    tenants = await TenantRepository().all()
    if not tenants:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞.")
        return

    builder = InlineKeyboardBuilder()
    for tenant in tenants:
        builder.row(
            InlineKeyboardButton(
                text=tenant.name,
                callback_data=AdminActionCallback(
                    action="stt", entity_id=str(tenant.id)
                ).pack(),
            )
        )
    await message.answer(
        "–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–∞—Ä–∏—Ñ:",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(TariffManagement.select_tenant)


@router.callback_query(AdminActionCallback.filter(F.action == "stt"))
async def handle_tariff_tenant_select(
    query: CallbackQuery, callback_data: AdminActionCallback, state: FSMContext
):
    """Handles tenant selection for tariff and shows their meters."""
    if not isinstance(query.message, Message):
        return

    tenant = await TenantRepository().get(pk=UUID(callback_data.entity_id))
    if not tenant:
        return
    await state.update_data(tenant_name=tenant.name)

    meters = await MeterRepository().get_for_tenant(UUID(callback_data.entity_id))
    if not meters:
        await query.message.edit_text(
            "–£ —ç—Ç–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –Ω–µ—Ç —Å—á–µ—Ç—á–∏–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω."
        )
        return await state.clear()

    builder = InlineKeyboardBuilder()
    for meter in meters:
        builder.row(
            InlineKeyboardButton(
                text=meter.name,
                callback_data=AdminActionCallback(
                    action="smt", entity_id=str(meter.id)
                ).pack(),
            )
        )
    await query.message.edit_text(
        "–®–∞–≥ 2/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞:",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(TariffManagement.select_meter)


@router.callback_query(
    TariffManagement.select_meter, AdminActionCallback.filter(F.action == "smt")
)
async def handle_tariff_meter_select(
    query: CallbackQuery, callback_data: AdminActionCallback, state: FSMContext
):
    """Handles meter selection and asks for the tariff rate."""
    if not isinstance(query.message, Message):
        return

    meter = await Meter.get_or_none(id=callback_data.entity_id)
    if not meter:
        return

    await state.update_data(meter_id=callback_data.entity_id, meter_name=meter.name)

    # Fetch last tariffs for history
    tariffs = await Tariff.filter(meter_id=meter.id).order_by("-period_start").limit(5)

    text_lines: list[str] = [
        "<b>–ò—Å—Ç–æ—Ä–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞:</b>",
        f"¬´{meter.name}¬ª\n",
    ]

    if tariffs:
        for t in tariffs:
            period_end = t.period_end.strftime("%d.%m.%Y") if t.period_end else "‚Ä¶"
            desc = (
                f"‚Ä¢ {t.rate_type or '‚Äî'} ‚Äî {t.rate} ‚ÇΩ "
                f"(—Å {t.period_start:%d.%m.%Y} –ø–æ {period_end})"
            )
            text_lines.append(desc)
    else:
        text_lines.append("‚è≥ –¢–∞—Ä–∏—Ñ—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")

    text_lines.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    builder = InlineKeyboardBuilder()

    # Add buttons for each existing tariff
    for t in tariffs:
        builder.row(
            InlineKeyboardButton(
                text=f"‚Ü© –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ¬´{t.rate_type or '‚Äî'}¬ª",
                callback_data=f"copytar:{t.id}",
            ),
            InlineKeyboardButton(
                text="‚úè –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data=f"fintar:{t.id}",
            ),
        )

    # Button to create brand-new tariff
    builder.row(InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ", callback_data="newtar"))

    await query.message.edit_text(
        "\n".join(text_lines), reply_markup=builder.as_markup()
    )
    await state.set_state(TariffManagement.manage_existing)


# --- Tariff: rate name entry (free text) ---
@router.message(TariffManagement.enter_rate_name)
async def handle_tariff_rate_name(message: Message, state: FSMContext):
    """Stores rate name then asks for numeric rate."""
    if not message.text:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(rate_name=message.text)
    await state.set_state(TariffManagement.enter_rate)
    await message.answer("–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–∞–≤–∫—É —Ç–∞—Ä–∏—Ñ–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5):")


@router.message(TariffManagement.enter_rate)
async def handle_tariff_rate(message: Message, state: FSMContext):
    """Handles the tariff rate and asks for the start date."""
    if not message.text:
        return
    try:
        # We just validate it's a decimal, but store as string to prevent
        # JSON issues with other FSM storages
        Decimal(message.text)
    except InvalidOperation:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(rate=message.text)
    await state.set_state(TariffManagement.enter_start_date)
    await message.answer(
        "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î-–ú–ú-–ì–ì–ì–ì</b>:"
    )


@router.message(TariffManagement.enter_start_date)
async def handle_tariff_start_date(message: Message, state: FSMContext):
    """Handles the start date, asks for confirmation."""
    if not message.text:
        return
    try:
        start_date = datetime.strptime(message.text, "%d-%m-%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        return

    if start_date.day != 1:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞:** –¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-01). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–Ω–æ–≤–∞."
        )
        return

    await state.update_data(start_date=start_date.isoformat())
    data = await state.get_data()

    text = (
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:</b>\n\n"
        f"<b>–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:</b> {data['tenant_name']}\n"
        f"<b>–°—á–µ—Ç—á–∏–∫:</b> {data['meter_name']}\n"
        f"<b>–¢–∞—Ä–∏—Ñ:</b> {data['rate_name']} ‚Äî {data['rate']} ‚ÇΩ\n"
        f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç —Å:</b> {start_date.strftime('%d.%m.%Y')}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    await message.answer(text, reply_markup=builder.as_markup())
    await state.set_state(TariffManagement.confirm_creation)


@router.callback_query(TariffManagement.confirm_creation, F.data == "confirm")
async def handle_tariff_confirmation(query: CallbackQuery, state: FSMContext):
    """Handles confirmation, deactivates old tariff, and creates the new one."""
    if not isinstance(query.message, Message):
        return

    data = await state.get_data()
    new_rate = Decimal(data["rate"])
    new_start_date = datetime.fromisoformat(data["start_date"]).date()

    # Find and close the currently active tariff for this meter
    active_tariff = await Tariff.filter(
        meter_id=data["meter_id"], period_end__isnull=True
    ).first()

    if active_tariff:
        if new_start_date <= active_tariff.period_start:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ "
                "—Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ —É —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."
            )
            await state.clear()
            return

        active_tariff.period_end = new_start_date - timedelta(days=1)
        await active_tariff.save()

    # Create the new tariff
    await Tariff.create(
        meter_id=data["meter_id"],
        rate=new_rate,
        period_start=new_start_date,
        rate_type=data["rate_name"],
    )

    await query.message.edit_text(
        "‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°—Ç–∞—Ä—ã–π —Ç–∞—Ä–∏—Ñ (–µ—Å–ª–∏ –±—ã–ª) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç."
    )
    await state.clear()


@router.callback_query(TariffManagement.confirm_creation, F.data == "cancel")
async def handle_tariff_cancellation(query: CallbackQuery, state: FSMContext):
    """Handles cancellation of tariff creation."""
    if not isinstance(query.message, Message):
        return
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


# --- Tariff management actions ---


@router.callback_query(TariffManagement.manage_existing, F.data == "newtar")
async def handle_new_tariff_action(query: CallbackQuery, state: FSMContext):
    """Starts creation of a completely new tariff."""
    if not isinstance(query.message, Message):
        return

    await query.message.edit_text(
        "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ—á–Ω–æ–π'):",
    )
    await state.set_state(TariffManagement.enter_rate_name)


@router.callback_query(TariffManagement.manage_existing, F.data.startswith("copytar:"))
async def handle_copy_tariff(query: CallbackQuery, state: FSMContext):
    """Copies selected tariff and asks only for new start date."""
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    tariff_id = query.data.split(":", 1)[1]
    tariff = await Tariff.get_or_none(id=tariff_id)
    if not tariff:
        await query.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # Pre-fill data and jump straight to start date step
    await state.update_data(rate_name=tariff.rate_type, rate=str(tariff.rate))
    await state.set_state(TariffManagement.enter_start_date)

    await query.message.edit_text(
        "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ ¬´{} ‚Äî {} ‚ÇΩ¬ª.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î-–ú–ú-–ì–ì–ì–ì</b>:".format(
            tariff.rate_type or "‚Äî", tariff.rate
        )
    )


@router.callback_query(TariffManagement.manage_existing, F.data.startswith("fintar:"))
async def handle_finish_tariff(query: CallbackQuery, state: FSMContext):
    """Finishes (closes) the selected tariff today."""
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    tariff_id = query.data.split(":", 1)[1]
    tariff = await Tariff.get_or_none(id=tariff_id)
    if not tariff:
        await query.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if tariff.period_end is not None:
        await query.answer("–¢–∞—Ä–∏—Ñ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
        return

    tariff.period_end = datetime.today().date()
    await tariff.save()

    await query.message.edit_text("‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await state.clear()


# --- Meter list / edit ---


@router.message(F.text == "üìü –°—á—ë—Ç—á–∏–∫–∏")
async def handle_meters_list(message: Message, state: FSMContext):
    """Shows tenants to choose whose meters to manage."""
    tenants = await TenantRepository().all()
    if not tenants:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞.")
        return

    builder = InlineKeyboardBuilder()
    for tenant in tenants:
        builder.row(
            InlineKeyboardButton(
                text=tenant.name,
                callback_data=f"ml_tenant:{tenant.id}",
            )
        )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—á—ë—Ç—á–∏–∫–æ–≤:",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("ml_tenant:"))
async def handle_meter_list_for_tenant(query: CallbackQuery, state: FSMContext):
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    tenant_id = query.data.split(":", 1)[1]
    tenant = await TenantRepository().get(pk=UUID(tenant_id))
    if not tenant:
        return

    meters = await MeterRepository().get_for_tenant(UUID(tenant_id))
    if not meters:
        await query.message.edit_text("–£ —ç—Ç–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –Ω–µ—Ç —Å—á—ë—Ç—á–∏–∫–æ–≤.")
        return

    text_lines = [f"<b>–°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è {tenant.name}:</b>"]
    builder = InlineKeyboardBuilder()

    for m in meters:
        parent_note = " (–ø–æ–¥)" if m.subtract_from else ""
        text_lines.append(f"‚Ä¢ {m.name}{parent_note}")

        builder.row(
            InlineKeyboardButton(
                text="‚öô –ò–∑–º",
                callback_data=f"meter_edit:{m.id}",
            ),
            InlineKeyboardButton(
                text="üóë Del",
                callback_data=f"meter_del:{m.id}",
            ),
        )

    await query.message.edit_text(
        "\n".join(text_lines), reply_markup=builder.as_markup()
    )


# --- Delete meter ---


@router.callback_query(F.data.startswith("meter_del:"))
async def handle_meter_delete(query: CallbackQuery):
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    meter_id = query.data.split(":", 1)[1]
    meter = await Meter.get_or_none(id=meter_id)
    if not meter:
        await query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await meter.delete()
    await query.message.edit_text(f"‚úÖ –°—á—ë—Ç—á–∏–∫ '{meter.name}' —É–¥–∞–ª—ë–Ω.")


# --- Simple parent edit ---


@router.callback_query(F.data.startswith("meter_edit:"))
async def handle_meter_edit(query: CallbackQuery, state: FSMContext):
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    meter_id = query.data.split(":", 1)[1]
    meter = await Meter.get_or_none(id=meter_id)
    if not meter:
        await query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # Ask to toggle parent
    tenants_meters = await MeterRepository().get_for_tenant(meter.tenant.id)
    builder = InlineKeyboardBuilder()

    if meter.subtract_from:
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –°–Ω—è—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è",
                callback_data=f"unset_parent:{meter.id}",
            )
        )
    else:
        for m in tenants_meters:
            if m.id == meter.id:
                continue
            builder.row(
                InlineKeyboardButton(
                    text=f"–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–º ¬´{m.name}¬ª",
                    callback_data=f"set_parent:{meter.id}:{m.id}",
                )
            )

    # Quick tariff change
    builder.row(
        InlineKeyboardButton(
            text="üí± –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ —Å —Å–µ–≥–æ–¥–Ω—è",
            callback_data=f"quick_tariff:{meter.id}",
        )
    )

    await query.message.edit_text(
        f"‚öô –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ ¬´{meter.name}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("unset_parent:"))
async def handle_unset_parent(query: CallbackQuery):
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    meter_id = query.data.split(":", 1)[1]
    meter = await Meter.get_or_none(id=meter_id)
    if not meter:
        return

    meter.subtract_from = None  # type: ignore[attr-defined]
    await meter.save()
    await query.message.edit_text("‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —Å–Ω—è—Ç.")


@router.callback_query(F.data.startswith("set_parent:"))
async def handle_set_parent(query: CallbackQuery):
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    parts = query.data.split(":")
    if len(parts) != 3:
        return

    meter_id, parent_id = parts[1], parts[2]
    meter = await Meter.get_or_none(id=meter_id)
    parent = await Meter.get_or_none(id=parent_id)
    if not meter or not parent:
        return

    meter.subtract_from = parent  # type: ignore[attr-defined]
    await meter.save()
    await query.message.edit_text(f"‚úÖ –°—á—ë—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –ø–æ–¥-—Å—á—ë—Ç—á–∏–∫ ¬´{parent.name}¬ª.")


@router.callback_query(F.data.startswith("quick_tariff:"))
async def handle_quick_tariff(query: CallbackQuery, state: FSMContext):
    """Jump from meter edit to tariff creation flow for the same meter."""
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return

    meter_id = query.data.split(":", 1)[1]
    meter = await Meter.get_or_none(id=meter_id)
    if not meter:
        await query.answer("–°—á—ë—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    tenant = await TenantRepository().get(pk=meter.tenant.id)
    if not tenant:
        return

    # Pre-populate FSM data and jump to rate name entry
    await state.update_data(
        tenant_name=tenant.name,
        meter_id=str(meter.id),
        meter_name=meter.name,
    )

    await state.set_state(TariffManagement.enter_rate_name)
    await query.message.edit_text(
        "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–µ–Ω—å'):",
    )
