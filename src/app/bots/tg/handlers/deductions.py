"""Handlers for deduction link management."""

from __future__ import annotations

from uuid import UUID

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bots.tg.keyboards.inline import DeductionLinkCallback
from app.bots.tg.middlewares.access import AdminAccessMiddleware
from app.bots.tg.states import DeductionLinkManagement
from app.core.models import DeductionLink
from app.core.repositories.meter import MeterRepository
from app.core.repositories.tenant import TenantRepository

router = Router(name=__name__)
router.message.middleware(AdminAccessMiddleware())
router.callback_query.middleware(AdminAccessMiddleware())


async def _get_main_view(message: Message | CallbackQuery, state: FSMContext) -> None:
    """Shows the main view with existing links and a create button."""
    await state.clear()
    await state.set_state(DeductionLinkManagement.start)

    links = await DeductionLink.all().prefetch_related(
        "parent_meter__tenant", "child_meter__tenant"
    )

    builder = InlineKeyboardBuilder()
    text_lines = ["<b>üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑—è–º–∏ –¥–ª—è –≤—ã—á–µ—Ç–æ–≤</b>\n"]

    if not links:
        text_lines.append("–ü–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–≤—è–∑–∏.")
    else:
        text_lines.append("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏:")
        for link in links:
            # Shorten names for display
            parent_info = (
                f"{link.parent_meter.tenant.name[:10]}‚Ä¶: "
                f"{link.parent_meter.name[:10]}‚Ä¶"
            )
            child_info = (
                f"{link.child_meter.tenant.name[:10]}‚Ä¶: "
                f"{link.child_meter.name[:10]}‚Ä¶"
            )
            text_lines.append(f"‚Ä¢ –ò–∑ üìÑ({parent_info}) –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è ‚û°Ô∏è ({child_info})")
            builder.row(
                InlineKeyboardButton(
                    text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å ¬´{link.description or '–ë–µ–∑ –∏–º–µ–Ω–∏'}¬ª",
                    callback_data=DeductionLinkCallback(
                        action="delete", link_id=str(link.id)
                    ).pack(),
                )
            )

    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å",
            callback_data=DeductionLinkCallback(action="create").pack(),
        )
    )

    text = "\n".join(text_lines)
    if isinstance(message, Message):
        await message.answer(text, reply_markup=builder.as_markup())
    elif isinstance(message.message, Message):
        await message.message.edit_text(text, reply_markup=builder.as_markup())


@router.message(F.text == "üîó –°–≤—è–∑–∏ –¥–ª—è –≤—ã—á–µ—Ç–æ–≤")
async def handle_deductions_command(message: Message, state: FSMContext) -> None:
    """Entry point for deduction link management."""
    await _get_main_view(message, state)


@router.callback_query(
    DeductionLinkManagement.start, DeductionLinkCallback.filter(F.action == "delete")
)
async def handle_delete_link(
    query: CallbackQuery, callback_data: DeductionLinkCallback, state: FSMContext
) -> None:
    """Deletes a deduction link."""
    if callback_data.link_id:
        await DeductionLink.filter(id=callback_data.link_id).delete()
    await query.answer("–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞.")
    await _get_main_view(query, state)


@router.callback_query(
    DeductionLinkManagement.start, DeductionLinkCallback.filter(F.action == "create")
)
async def handle_create_start(query: CallbackQuery, state: FSMContext) -> None:
    """Starts the creation of a new deduction link by selecting the parent tenant."""
    if not isinstance(query.message, Message):
        return
    await state.set_state(DeductionLinkManagement.select_parent_tenant)
    tenants = await TenantRepository().all()
    builder = InlineKeyboardBuilder()
    for tenant in tenants:
        builder.row(
            InlineKeyboardButton(
                text=tenant.name,
                callback_data=DeductionLinkCallback(
                    action="select_parent_tenant", tenant_id=str(tenant.id)
                ).pack(),
            )
        )
    await query.message.edit_text(
        "<b>–®–∞–≥ 1/5:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞, —Å–æ —Å—á—ë—Ç—á–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ "
        "–±—É–¥—É—Ç <b>–≤—ã—á–∏—Ç–∞—Ç—å</b> –ø–æ–∫–∞–∑–∞–Ω–∏—è:",
        reply_markup=builder.as_markup(),
    )


async def _select_meter(
    query: CallbackQuery,
    state: FSMContext,
    tenant_id: str,
    next_action: str,
    text: str,
) -> None:
    """Helper to show meters for a tenant."""
    if not isinstance(query.message, Message):
        return
    meters = await MeterRepository().get_for_tenant(tenant_id)
    if not meters:
        await query.message.edit_text("–£ —ç—Ç–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –Ω–µ—Ç —Å—á–µ—Ç—á–∏–∫–æ–≤.")
        await state.clear()
        return

    builder = InlineKeyboardBuilder()
    for meter in meters:
        builder.row(
            InlineKeyboardButton(
                text=meter.name,
                callback_data=DeductionLinkCallback(
                    action=next_action, meter_id=str(meter.id)
                ).pack(),
            )
        )
    await query.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(
    DeductionLinkManagement.select_parent_tenant,
    DeductionLinkCallback.filter(F.action == "select_parent_tenant"),
)
async def handle_parent_tenant_selected(
    query: CallbackQuery, callback_data: DeductionLinkCallback, state: FSMContext
) -> None:
    """Handles parent tenant selection and shows its meters."""
    if not callback_data.tenant_id:
        return
    await state.update_data(parent_tenant_id=callback_data.tenant_id)
    await state.set_state(DeductionLinkManagement.select_parent_meter)
    await _select_meter(
        query,
        state,
        callback_data.tenant_id,
        "select_parent_meter",
        "<b>–®–∞–≥ 2/5:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç—á–∏–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç <b>–≤—ã—á–∏—Ç–∞—Ç—å</b>:",
    )


@router.callback_query(
    DeductionLinkManagement.select_parent_meter,
    DeductionLinkCallback.filter(F.action == "select_parent_meter"),
)
async def handle_parent_meter_selected(
    query: CallbackQuery, callback_data: DeductionLinkCallback, state: FSMContext
) -> None:
    """Handles parent meter selection and asks for child tenant."""
    if not isinstance(query.message, Message):
        return
    if not callback_data.meter_id:
        return
    await state.update_data(parent_meter_id=callback_data.meter_id)
    await state.set_state(DeductionLinkManagement.select_child_tenant)

    tenants = await TenantRepository().all()
    builder = InlineKeyboardBuilder()
    for tenant in tenants:
        builder.row(
            InlineKeyboardButton(
                text=tenant.name,
                callback_data=DeductionLinkCallback(
                    action="select_child_tenant", tenant_id=str(tenant.id)
                ).pack(),
            )
        )
    await query.message.edit_text(
        "<b>–®–∞–≥ 3/5:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞, —Å—á—ë—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ "
        "–±—É–¥–µ—Ç <b>–∏—Å—Ç–æ—á–Ω–∏–∫–æ–º</b> –¥–ª—è –≤—ã—á–µ—Ç–∞:",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(
    DeductionLinkManagement.select_child_tenant,
    DeductionLinkCallback.filter(F.action == "select_child_tenant"),
)
async def handle_child_tenant_selected(
    query: CallbackQuery, callback_data: DeductionLinkCallback, state: FSMContext
) -> None:
    """Handles child tenant selection and shows its meters."""
    if not callback_data.tenant_id:
        return
    await state.update_data(child_tenant_id=callback_data.tenant_id)
    await state.set_state(DeductionLinkManagement.select_child_meter)
    await _select_meter(
        query,
        state,
        callback_data.tenant_id,
        "select_child_meter",
        "<b>–®–∞–≥ 4/5:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç—á–∏–∫-<b>–∏—Å—Ç–æ—á–Ω–∏–∫</b>:",
    )


@router.callback_query(
    DeductionLinkManagement.select_child_meter,
    DeductionLinkCallback.filter(F.action == "select_child_meter"),
)
async def handle_child_meter_selected(
    query: CallbackQuery, callback_data: DeductionLinkCallback, state: FSMContext
) -> None:
    """Handles child meter selection and asks for a description."""
    if not isinstance(query.message, Message):
        return
    if not callback_data.meter_id:
        return
    await state.update_data(child_meter_id=callback_data.meter_id)
    await state.set_state(DeductionLinkManagement.enter_description)
    await query.message.edit_text(
        "<b>–®–∞–≥ 5/5:</b> –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∏, "
        "–∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã—á–µ—Ç –∑–∞ —Å–∫–ª–∞–¥')."
    )


@router.message(DeductionLinkManagement.enter_description)
async def handle_description(message: Message, state: FSMContext) -> None:
    """Handles description and asks for confirmation."""
    if not message.text:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    await state.update_data(description=message.text)
    data = await state.get_data()

    # Fetch details for confirmation text
    repo = MeterRepository()
    parent_meter = await repo.model.get(
        id=UUID(data["parent_meter_id"])
    ).prefetch_related("tenant")
    child_meter = await repo.model.get(
        id=UUID(data["child_meter_id"])
    ).prefetch_related("tenant")

    parent_info = f"¬´{parent_meter.name}¬ª (–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {parent_meter.tenant.name})"
    child_info = f"¬´{child_meter.name}¬ª (–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {child_meter.tenant.name})"

    text_lines = [
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏:</b>\n",
        f"üîπ <b>–ò–∑ —Å—á—ë—Ç—á–∏–∫–∞:</b> {parent_info}",
        f"üî∏ <b>–í—ã—á–∏—Ç–∞–µ—Ç—Å—è —Å—á—ë—Ç—á–∏–∫:</b> {child_info}",
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n",
        "–≠—Ç–∞ —Å–≤—è–∑—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤–≤–æ–¥–µ "
        "–ø–æ–∫–∞–∑–∞–Ω–∏–π. –í—Å—ë –≤–µ—Ä–Ω–æ?",
    ]
    text = "\n".join(text_lines)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    await message.answer(text, reply_markup=builder.as_markup())
    await state.set_state(DeductionLinkManagement.confirm_creation)


@router.callback_query(DeductionLinkManagement.confirm_creation, F.data == "confirm")
async def handle_confirmation(query: CallbackQuery, state: FSMContext) -> None:
    """Creates the link and returns to the main view."""
    data = await state.get_data()
    await DeductionLink.create(
        parent_meter_id=data["parent_meter_id"],
        child_meter_id=data["child_meter_id"],
        description=data["description"],
    )
    await query.answer("‚úÖ –°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await _get_main_view(query, state)


@router.callback_query(DeductionLinkManagement.confirm_creation, F.data == "cancel")
async def handle_cancellation(query: CallbackQuery, state: FSMContext) -> None:
    """Cancels creation and returns to the main view."""
    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await _get_main_view(query, state)
