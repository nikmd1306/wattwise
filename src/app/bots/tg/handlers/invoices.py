"""Handlers for invoice generation."""

from __future__ import annotations

import tempfile
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, FSInputFile, Message

from app.bots.tg.handlers.utils import get_period_keyboard
from app.bots.tg.keyboards.inline import SelectPeriodCallback
from app.core.repositories.tenant import TenantRepository
from app.services.billing import BillingError, BillingService
from app.services.export import ExportService

router = Router(name=__name__)


@router.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç")
async def handle_invoice_command(message: Message):
    """Starts the invoice generation process by showing recent months."""
    builder = get_period_keyboard("invoice")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤:", reply_markup=builder.as_markup()
    )


@router.callback_query(SelectPeriodCallback.filter(F.action == "invoice"))
async def handle_period_for_invoice(
    query: CallbackQuery,
    callback_data: SelectPeriodCallback,
    billing_service: BillingService,
):
    """
    Generates invoices for all tenants for a specified month.
    """
    if not isinstance(query.message, Message):
        return

    await query.answer()

    try:
        period = datetime.strptime(callback_data.period, "%Y-%m").date()
    except ValueError:
        await query.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        return

    tenants = await TenantRepository().all()
    if not tenants:
        await query.message.edit_text("–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # Acknowledge the start of the process
    await query.message.edit_text(
        f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—á–µ—Ç–æ–≤ –∑–∞ {period:%B %Y} "
        f"–¥–ª—è {len(tenants)} –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤..."
    )

    export_service = ExportService()
    for tenant in tenants:
        # Check completeness first
        issues = await billing_service.completeness_check(tenant.id, period)
        if issues:
            msg = "\n".join(issues)
            # Use answer on the original message to send new messages
            await query.message.answer(
                f"‚ö†Ô∏è –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è <b>{tenant.name}</b> –∑–∞ "
                f"<b>{period:%B %Y}</b>.\n\n<b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö:</b>\n{msg}"
            )
            continue

        try:
            invoice, details = await billing_service.generate_invoice(tenant.id, period)
            with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as temp_file:
                output_path = await export_service.generate_pdf_invoice(
                    invoice, details, temp_file.name
                )
                await query.message.answer_document(
                    FSInputFile(output_path),
                    caption=f"–°—á–µ—Ç –¥–ª—è {tenant.name}",
                )
        except BillingError as e:
            await query.message.answer(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è <b>{tenant.name}</b>.\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {e}\n\n"
                "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞–∑–∞–Ω–∏—è "
                "–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü—ã, –∞ —Ç–∞–∫–∂–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ) "
                "–≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</i>"
            )
        except Exception as e:
            await query.message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {tenant.name}: {e}"
            )
