from __future__ import annotations

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bots.tg.keyboards.reply import get_main_menu
from app.bots.tg.states import Onboarding
from app.config import settings

router = Router(name=__name__)


async def _send_page(message: Message, page: int):
    """Utility: send onboarding page with navigation buttons."""
    texts = {
        1: (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WattWise!</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—á—ë—Ç —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å–æ–≤ "
            "–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤."
        ),
        2: (
            "üìä <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n"
            "1. –í–≤–æ–¥–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è.\n"
            "2. –ë–æ—Ç —Å–∞–º —Å—á–∏—Ç–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç PDF-—Å—á—ë—Ç.\n"
            "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É–±-—Å—á—ë—Ç—á–∏–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."
        ),
        3: ("üöÄ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b>\n\n" "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ –≤–ø–µ—Ä—ë–¥!"),
    }

    builder = InlineKeyboardBuilder()
    if page < 3:
        builder.add(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"onb_next:{page}")
        )
    else:
        builder.add(InlineKeyboardButton(text="–ü–æ–≥–Ω–∞–ª–∏! üöÄ", callback_data="onb_done"))

    await message.answer(texts[page], reply_markup=builder.as_markup())


@router.message(F.text == "/onboarding")
async def start_onboarding_manual(message: Message, state: FSMContext):
    """Manual command to start onboarding (for tests)."""
    await state.set_state(Onboarding.page1)
    await _send_page(message, 1)


@router.callback_query(F.data.startswith("onb_next:"))
async def onboarding_next(query: CallbackQuery, state: FSMContext):
    if not isinstance(query.message, Message):
        return
    if not query.data:
        return
    page = int(query.data.split(":")[1]) + 1
    if page == 2:
        await state.set_state(Onboarding.page2)
    else:
        await state.set_state(Onboarding.page3)
    await _send_page(query.message, page)


@router.callback_query(F.data == "onb_done")
async def onboarding_done(query: CallbackQuery, state: FSMContext):
    if not isinstance(query.message, Message):
        return
    await state.clear()
    # Show main menu
    if not query.from_user:
        return
    is_admin = query.from_user.id in settings.ADMIN_IDS
    await query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(is_admin))
